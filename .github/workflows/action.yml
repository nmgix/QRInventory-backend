name: Деплой бекенда

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Получение репозитория
        uses: actions/checkout@v3.5.2

      - name: Настройка .env
        run: |
          touch .env
          echo JWT_ACCESS_SECRET="${{ secrets.JWT_ACCESS_SECRET }}" >> .env |
          echo JWT_COOKIE="${{ secrets.JWT_COOKIE }}" >> .env |
          echo JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}" >> .env |
          echo PGADMIN_PASSWORD="${{ secrets.PGADMIN_PASSWORD }}" >> .env |
          echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> .env |
          cat ../../../../.env >> .env |

          echo ACCESS_TIMEOUT="${{ vars.ACCESS_TIMEOUT }}" >> .env | 
          echo APP_PORT="${{ vars.APP_PORT }}" >> .env | 
          echo NGINX_PORT="${{ vars.NGINX_PORT }}" >> .env |
          echo DOMAIN="${{ vars.DOMAIN }}" >> .env | 
          echo PGADMIN_EMAIL="${{ vars.PGADMIN_EMAIL }}" >> .env | 
          echo PGADMIN_PORT="${{ vars.PGADMIN_PORT }}" >> .env | 
          echo POSTGRES_DB="${{ vars.POSTGRES_DB }}" >> .env | 
          echo POSTGRES_HOST="${{ vars.POSTGRES_HOST }}" >> .env | 
          echo POSTGRES_PORT="${{ vars.POSTGRES_PORT }}" >> .env | 
          echo POSTGRES_USER="${{ vars.POSTGRES_USER }}" >> .env | 
          echo REFRESH_TIMEOUT="${{ vars.REFRESH_TIMEOUT }}" >> .env |
          echo SSH_HOST="${{ vars.SSH_HOST }}" >> .env |
          echo UPLOADED_FILES_DESTINATION="${{ vars.UPLOADED_FILES_DESTINATION }}" >> .env

      - name: Дамп БД
        continue-on-error: true
        run: |
          docker exec -u ${{ vars.POSTGRES_USER }} ${{ vars.POSTGRES_HOST }} pg_dump -Fc ${{ vars.POSTGRES_DB }} > db.dump

      - name: Удаление контейнеров
        continue-on-error: true
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down

      - name: Сборка Docker и деплой
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --build -d --force-recreate

      # - name: Фикс БД при ошибке
      #   if: failure()
      #   run: |
      #     docker exec -i -u ${{ vars.POSTGRES_USER }} ${{ vars.POSTGRES_HOST }} pg_restore -C -d postgres < db.dump
