services:
  qr-inventory-api:
    container_name: qr-inventory-api
    build:
      dockerfile: Dockerfile
      context: .
      target: build
    env_file:
      - .env
    environment:
      NODE_ENV: developmentdocker
    command: npm run start:prod
    ports:
      - "${GLOBAL_PORT}:${APP_PORT}"
    depends_on:
      - postgres
      - postgres_test
    networks:
      - qr-inventory-proxy
      - api
  postgres:
    image: postgres
    restart: always
    container_name: ${POSTGRES_HOST}
    command: postgres -c port=${POSTGRES_PORT} -c listen_addresses='*'
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - api
  postgres_test:
    image: postgres
    restart: always
    container_name: ${POSTGRES_TEST_HOST}
    command: postgres -c port=${POSTGRES_TEST_PORT} -c listen_addresses='*'
    environment:
      POSTGRES_DB: ${POSTGRES_TEST_DB}
      POSTGRES_USER: ${POSTGRES_TEST_USER}
      POSTGRES_PASSWORD: ${POSTGRES_TEST_PASSWORD}
    ports:
      - "${POSTGRES_TEST_PORT}:${POSTGRES_TEST_PORT}"
    networks:
      - api
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - ${PGADMIN_PORT}:80
    # volumes:
    #   - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - api
volumes:
  docker-nest-invetorying:
networks:
  api:
    name: api
  qr-inventory-proxy:
    name: qr-inventory
